Sprint 1
Exploring an existing Python code base related to my project and evaluating using it for my project

In this video, the functionality of the Tic-Tac-Toe code is demonstrated, showcasing how the game can be played in three different modes:

1. **Human vs. Computer**:
   - In this mode, a human player competes against an AI-controlled opponent. The computer uses an algorithm to determine its moves, making the game challenging for the human player. The AI can be programmed with strategies ranging from random moves to an unbeatable strategy using techniques like the Minimax algorithm.
   - The game alternates turns, with the human choosing a cell first, followed by the computer making its calculated move. The aim is for the human to either win by placing three marks in a row or prevent the computer from winning.

2. **Human vs. Human**:
   - This mode allows two human players to face off against each other. Each player takes turns placing their mark on the board, with the game alternating between Player X and Player O.
   - The game continues until one player achieves three consecutive marks in a row (horizontal, vertical, or diagonal), or until all cells are filled without a winner, resulting in a tie.

3. **Computer vs. Computer**:
   - In this mode, both players are AI-controlled. This feature allows the computer to play against itself, showcasing the algorithm's decision-making process without human input.
   - The game runs automatically, with each AI making its move according to its programmed strategy. Watching two AIs play against each other can provide insight into the effectiveness of the AIâ€™s strategy and demonstrate its moves from start to finish.

Each mode is designed to highlight different aspects of the code, such as user input handling, algorithmic decision-making, and game flow control. This variety of play options makes the Tic-Tac-Toe program versatile and interactive, allowing users to explore various gameplay scenarios and AI strategies.


(https://youtu.be/8ext9G7xspg?si=DUjIpCYEIF7ZF56p)  

Sprint 2 
"Making small updates and adding commit messages with them in your repository so that your work is visible"

Step 1: Set up the initial game board
Implement the print_board function to display the board.
Create the main game loop structure with a placeholder for player moves.
Add a basic representation of the board.

Step 2: Add player input functionality
Implement user input to place an "X" on the board.
Add validation to ensure the input corresponds to an empty cell.

Step 3: Implement win and tie conditions
Add the check_winner function to detect a win condition for rows, columns, and diagonals.
Add the is_full function to detect tie conditions when the board is full.

Step 4: Introduce AI moves
Create the ai_move function with logic to prioritize winning moves and block player moves.
Allow the AI to play as "O" and take turns after the player.

Step 5: Finalize the game loop
Combine all components to alternate turns between the player and the AI.
Add win/tie checks after each move.
Add user-friendly messages for game progress and outcomes.
